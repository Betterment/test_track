// Custom Flexbox grid system, implemented as closely as possible to Neat.

// All Flexbox grids are disabled by default. Override this to `true` in your
// application or scoped pages to use Flexbox hotness.
$use-flex-grid: false;

@mixin outer-container($args...) {
    @if $use-flex-grid == true {
        @include flex-outer-container($args...);
    } @else {
        @include neat-outer-container($args...);
    }
}

@mixin span-columns($args...) {
    @if $use-flex-grid == true {
        @include flex-span-columns($args...);
    } @else {
        @include neat-span-columns($args...);
    }
}

@mixin fill-parent() {
    @if $use-flex-grid == true {
        @include flex-fill-parent();
    } @else {
        @include neat-fill-parent();
    }
}

@mixin omega($args...) {
    @if $use-flex-grid == true {
        // no-op. flexbox does this automagically.
    } @else {
        @include neat-omega($args...);
    }
}

// Makes an element a flex container by centering it in the viewport, setting its `max-width`, and setting grid-specific flex settings.
@mixin flex-outer-container($local-max-width: $max-width) {
    max-width: $local-max-width;
    margin: {
        left: auto;
        right: auto;
    }

    &:after {
        content: none;
    }

    @include flex-parent-container;
}

// Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.
@mixin flex-span-columns($span: $columns of $container-columns, $display: block) {
    $columns: nth($span, 1);
    $container-columns: container-span($span);

    $parent-columns: get-parent-columns($container-columns) !global;

    @include flex-grow(0);
    @include flex-shrink(0);
    @include flex-basis(flex-grid($columns, $container-columns));
}

// Makes an element a flex container and sets grid-specific flex settings.
@mixin flex-parent-container() {
    @include align-items(stretch);
    @include display(flex);
    @include flex-direction(row);
    @include flex-wrap(wrap);
    @include justify-content(space-between);
    @include align-content(flex-start);
}

// Forces the element to fill its parent container.
@mixin flex-fill-parent() {
    @include flex-basis(100%);
}
