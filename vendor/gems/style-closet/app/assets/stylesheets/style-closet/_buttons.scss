// Styles for all sorts of buttons

%button-base {
    font-family: inherit;
    @include appearance(none);
    display: inline-block;
    padding: 0.75em 1.6em 0.65em; // bottom value is to compensate for odd line-height rendering
    border-width: 1px; // slight hack so these line up with knockout buttons
    border-style: solid;
    border-radius: $corner-radius;
    cursor: pointer;
    outline: none;
    user-select: none;
    font-size: 16px;
    letter-spacing: 0.025em;
    line-height: 1;
    font-weight: $font-bold;
    text-align: center;
    text-decoration: none;
    vertical-align: middle;
    white-space: nowrap;
    transition: all 0.1s linear;

    &:hover, &.hover, &:active, &.active {
        text-decoration: none;
    }

    &:disabled, &[disabled], &.disabled {
        cursor: not-allowed;
        opacity: 0.55;
    }

    &:not(:last-child) {
        margin-right: 1.25em;
    }
}

@mixin _button-state-colors($type: primary) {

    // set up a map of valid button types and their corresponding background, border, and text colors
    $button-types: (
        primary: (
            background: $bright-blue,
            border: $bright-blue,
            text: $white
        ),
        secondary: (
            background: transparent,
            border: $bright-blue,
            text: $bright-blue
        ),
        knockout: (
            background: transparent,
            border: $white,
            text: $white
        ),
        priority: (
            background: $green,
            border: $green,
            text: $white
        ),
        status: (
            background: transparent,
            border: $light-grey,
            text: $medium-grey
        )
    );

    // if we've passed a not allowed state, yell at us
    @if not map-has-key($button-types, $type) {
        @warn "#{$type} is not a valid button state. Please refer to buttons provided by Style Closet.";
    }

    // set the colors from the map values
    background-color: map-get-z($button-types, $type, background);
    border-color: map-get-z($button-types, $type, border);
    color: map-get-z($button-types, $type, text);

    &:hover, &.hover {
        // some hover states are non-standard so we have to check for special cases
        @if $type == secondary {
            // secondary buttons should fill in border color with white text on hover
            background-color: map-get-z($button-types, $type, border);
            color: $white;
        } @else if $type == knockout {
            // knockout buttons should fill with translucent white
            background-color: rgba(map-get-z($button-types, $type, border), 0.1);
        } @else if $type == status {
            // status button borders should turn same as text on hover
            border-color: currentColor;
        } @else {
            // all other buttons should just lighten their background
            background-color: lighten(map-get-z($button-types, $type, background), 6%);
            border-color: lighten(map-get-z($button-types, $type, border), 6%);
            color: $white;
        }
    }

    &:active, &.active {
        // active states are slightly darker versions of their respective hover states
        @if $type == secondary {
            background-color: darken(map-get-z($button-types, $type, border), 7%);
        } @else if $type == knockout {
            background-color: rgba(map-get-z($button-types, $type, border), 0.05);
        } @else if $type == status {
            border-color: darken(map-get-z($button-types, $type, text), 7%);
        } @else {
            background-color: darken(map-get-z($button-types, $type, background), 7%);
            border-color: darken(map-get-z($button-types, $type, border), 7%);
        }
    }
}

%button {
    @extend %button-base;
    @include _button-state-colors();
}

%button-secondary {
    @extend %button-base;
    @include _button-state-colors(secondary);
}

%button-secondary-knockout {
    @extend %button-base;
    @include _button-state-colors(knockout);
}

%button-priority {
    @extend %button-base;
    @include _button-state-colors(priority);
}

%button-status {
    @extend %button-base;
    border-radius: 10em; // outrageously large to be safe. 50% does not do what you might think.
    padding: 1.1em 2em 0.9em;
    font-size: 14px;
    @include _button-state-colors(status);
}

%button-small {
    @extend %button-base;
    font-size: 12px;
    @extend %small-caps;
}

#{$all-buttons}, .button {
    // this generates the actual button classes and placeholders.
    @extend %button;

    &.secondary {
        @extend %button-secondary;

        &-knockout {
            @extend %button-secondary-knockout;
        }
    }

    &.priority {
        @extend %button-priority;
    }

    &.status {
        @extend %button-status;

        &.toggle-on {
            color: $green;
        }

        &.toggle-off {
            color: $yellow;
        }
    }

    &.small {
        @extend %button-small;
    }
}

.sc-actions {
    margin: 1.875em 0;
}
